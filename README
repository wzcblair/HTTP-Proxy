Design of HTTP Proxy: I divided the code into multiple steps. I used the functions for creating client and server sockets given as a reference for the socket programming assignment. I then separately wrote functions for reading in a client's request, formatting the request for the server, sending the request to the server, reading the server's response, and forwarding the server's response back to the client. All request/response strings are dynamically allocated, and in many cases resizable. All these functions are only called from the child process, which is forked at the time a socket connection is made between proxy and client. The parent process makes sure to reap children whose process has terminated, and will not have more than 20 child processes running at the same time. Error-checking is done for just about everything.
